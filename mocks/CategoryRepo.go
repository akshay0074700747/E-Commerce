// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	helperstructs "ecommerce/web/helpers/helper_structs"

	mock "github.com/stretchr/testify/mock"

	responce "ecommerce/web/helpers/responce"
)

// CategoryRepo is an autogenerated mock type for the CategoryRepo type
type CategoryRepo struct {
	mock.Mock
}

// CreateCategory provides a mock function with given fields: catreq
func (_m *CategoryRepo) CreateCategory(catreq helperstructs.CategoryReq) (responce.CategoryData, error) {
	ret := _m.Called(catreq)

	var r0 responce.CategoryData
	var r1 error
	if rf, ok := ret.Get(0).(func(helperstructs.CategoryReq) (responce.CategoryData, error)); ok {
		return rf(catreq)
	}
	if rf, ok := ret.Get(0).(func(helperstructs.CategoryReq) responce.CategoryData); ok {
		r0 = rf(catreq)
	} else {
		r0 = ret.Get(0).(responce.CategoryData)
	}

	if rf, ok := ret.Get(1).(func(helperstructs.CategoryReq) error); ok {
		r1 = rf(catreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: category_id
func (_m *CategoryRepo) DeleteCategory(category_id uint) error {
	ret := _m.Called(category_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(category_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetallCategory provides a mock function with given fields:
func (_m *CategoryRepo) GetallCategory() ([]responce.CategoryData, error) {
	ret := _m.Called()

	var r0 []responce.CategoryData
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]responce.CategoryData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []responce.CategoryData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]responce.CategoryData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCategory provides a mock function with given fields: catreq
func (_m *CategoryRepo) UpdateCategory(catreq helperstructs.CategoryReq) (responce.CategoryData, error) {
	ret := _m.Called(catreq)

	var r0 responce.CategoryData
	var r1 error
	if rf, ok := ret.Get(0).(func(helperstructs.CategoryReq) (responce.CategoryData, error)); ok {
		return rf(catreq)
	}
	if rf, ok := ret.Get(0).(func(helperstructs.CategoryReq) responce.CategoryData); ok {
		r0 = rf(catreq)
	} else {
		r0 = ret.Get(0).(responce.CategoryData)
	}

	if rf, ok := ret.Get(1).(func(helperstructs.CategoryReq) error); ok {
		r1 = rf(catreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryRepo creates a new instance of CategoryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepo {
	mock := &CategoryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
