// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	helperstructs "ecommerce/web/helpers/helper_structs"

	mock "github.com/stretchr/testify/mock"

	responce "ecommerce/web/helpers/responce"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// GetByEmail provides a mock function with given fields: user
func (_m *UserRepo) GetByEmail(user helperstructs.UserReq) (responce.UserData, error) {
	ret := _m.Called(user)

	var r0 responce.UserData
	var r1 error
	if rf, ok := ret.Get(0).(func(helperstructs.UserReq) (responce.UserData, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(helperstructs.UserReq) responce.UserData); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(responce.UserData)
	}

	if rf, ok := ret.Get(1).(func(helperstructs.UserReq) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserSignUp provides a mock function with given fields: user
func (_m *UserRepo) UserSignUp(user helperstructs.UserReq) (responce.UserData, error) {
	ret := _m.Called(user)

	var r0 responce.UserData
	var r1 error
	if rf, ok := ret.Get(0).(func(helperstructs.UserReq) (responce.UserData, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(helperstructs.UserReq) responce.UserData); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(responce.UserData)
	}

	if rf, ok := ret.Get(1).(func(helperstructs.UserReq) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
