// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// OtpUseCaseInteface is an autogenerated mock type for the OtpUseCaseInteface type
type OtpUseCaseInteface struct {
	mock.Mock
}

// GenerateOtp provides a mock function with given fields: email
func (_m *OtpUseCaseInteface) GenerateOtp(email string) (string, error) {
	ret := _m.Called(email)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOtp provides a mock function with given fields: email, otp
func (_m *OtpUseCaseInteface) VerifyOtp(email string, otp string) bool {
	ret := _m.Called(email, otp)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(email, otp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewOtpUseCaseInteface creates a new instance of OtpUseCaseInteface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOtpUseCaseInteface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OtpUseCaseInteface {
	mock := &OtpUseCaseInteface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
