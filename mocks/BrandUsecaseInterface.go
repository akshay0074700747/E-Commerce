// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	helperstructs "ecommerce/web/helpers/helper_structs"

	mock "github.com/stretchr/testify/mock"

	responce "ecommerce/web/helpers/responce"
)

// BrandUsecaseInterface is an autogenerated mock type for the BrandUsecaseInterface type
type BrandUsecaseInterface struct {
	mock.Mock
}

// CreateBrand provides a mock function with given fields: ctx, brandreq
func (_m *BrandUsecaseInterface) CreateBrand(ctx context.Context, brandreq helperstructs.BrandReq) (responce.BrandData, error) {
	ret := _m.Called(ctx, brandreq)

	var r0 responce.BrandData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, helperstructs.BrandReq) (responce.BrandData, error)); ok {
		return rf(ctx, brandreq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, helperstructs.BrandReq) responce.BrandData); ok {
		r0 = rf(ctx, brandreq)
	} else {
		r0 = ret.Get(0).(responce.BrandData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, helperstructs.BrandReq) error); ok {
		r1 = rf(ctx, brandreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBrand provides a mock function with given fields: ctx, brand_id
func (_m *BrandUsecaseInterface) DeleteBrand(ctx context.Context, brand_id uint) error {
	ret := _m.Called(ctx, brand_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, brand_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetallBrand provides a mock function with given fields: ctx
func (_m *BrandUsecaseInterface) GetallBrand(ctx context.Context) ([]responce.BrandData, error) {
	ret := _m.Called(ctx)

	var r0 []responce.BrandData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]responce.BrandData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []responce.BrandData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]responce.BrandData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBrand provides a mock function with given fields: ctx, brandreq
func (_m *BrandUsecaseInterface) UpdateBrand(ctx context.Context, brandreq helperstructs.BrandReq) (responce.BrandData, error) {
	ret := _m.Called(ctx, brandreq)

	var r0 responce.BrandData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, helperstructs.BrandReq) (responce.BrandData, error)); ok {
		return rf(ctx, brandreq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, helperstructs.BrandReq) responce.BrandData); ok {
		r0 = rf(ctx, brandreq)
	} else {
		r0 = ret.Get(0).(responce.BrandData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, helperstructs.BrandReq) error); ok {
		r1 = rf(ctx, brandreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBrandUsecaseInterface creates a new instance of BrandUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrandUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrandUsecaseInterface {
	mock := &BrandUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
