// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	helperstructs "ecommerce/web/helpers/helper_structs"

	mock "github.com/stretchr/testify/mock"

	responce "ecommerce/web/helpers/responce"
)

// ProductsRepo is an autogenerated mock type for the ProductsRepo type
type ProductsRepo struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: productreq
func (_m *ProductsRepo) AddProduct(productreq helperstructs.ProductReq) (responce.ProuctData, error) {
	ret := _m.Called(productreq)

	var r0 responce.ProuctData
	var r1 error
	if rf, ok := ret.Get(0).(func(helperstructs.ProductReq) (responce.ProuctData, error)); ok {
		return rf(productreq)
	}
	if rf, ok := ret.Get(0).(func(helperstructs.ProductReq) responce.ProuctData); ok {
		r0 = rf(productreq)
	} else {
		r0 = ret.Get(0).(responce.ProuctData)
	}

	if rf, ok := ret.Get(1).(func(helperstructs.ProductReq) error); ok {
		r1 = rf(productreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: product_id
func (_m *ProductsRepo) DeleteProduct(product_id uint) error {
	ret := _m.Called(product_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(product_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindDiscountByID provides a mock function with given fields: category_id
func (_m *ProductsRepo) FindDiscountByID(category_id uint) (responce.DiscountData, error) {
	ret := _m.Called(category_id)

	var r0 responce.DiscountData
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (responce.DiscountData, error)); ok {
		return rf(category_id)
	}
	if rf, ok := ret.Get(0).(func(uint) responce.DiscountData); ok {
		r0 = rf(category_id)
	} else {
		r0 = ret.Get(0).(responce.DiscountData)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(category_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRelatedProducts provides a mock function with given fields: cat_id
func (_m *ProductsRepo) FindRelatedProducts(cat_id uint) ([]uint, error) {
	ret := _m.Called(cat_id)

	var r0 []uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]uint, error)); ok {
		return rf(cat_id)
	}
	if rf, ok := ret.Get(0).(func(uint) []uint); ok {
		r0 = rf(cat_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(cat_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBrand provides a mock function with given fields: id
func (_m *ProductsRepo) GetBrand(id uint) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryID provides a mock function with given fields: category, subcategory
func (_m *ProductsRepo) GetCategoryID(category string, subcategory string) (uint, error) {
	ret := _m.Called(category, subcategory)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (uint, error)); ok {
		return rf(category, subcategory)
	}
	if rf, ok := ret.Get(0).(func(string, string) uint); ok {
		r0 = rf(category, subcategory)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(category, subcategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields:
func (_m *ProductsRepo) GetProducts() ([]responce.ProuctData, error) {
	ret := _m.Called()

	var r0 []responce.ProuctData
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]responce.ProuctData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []responce.ProuctData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]responce.ProuctData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: productreq
func (_m *ProductsRepo) UpdateProduct(productreq helperstructs.ProductReq) (responce.ProuctData, error) {
	ret := _m.Called(productreq)

	var r0 responce.ProuctData
	var r1 error
	if rf, ok := ret.Get(0).(func(helperstructs.ProductReq) (responce.ProuctData, error)); ok {
		return rf(productreq)
	}
	if rf, ok := ret.Get(0).(func(helperstructs.ProductReq) responce.ProuctData); ok {
		r0 = rf(productreq)
	} else {
		r0 = ret.Get(0).(responce.ProuctData)
	}

	if rf, ok := ret.Get(1).(func(helperstructs.ProductReq) error); ok {
		r1 = rf(productreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductsRepo creates a new instance of ProductsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductsRepo {
	mock := &ProductsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
